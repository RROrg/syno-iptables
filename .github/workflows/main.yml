#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
# 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

# # 注意：所有 include 组合会在 exclude 之后处理。 这允许你使用 include 添加回以前排除的组合。
# version: [ 6.2, 7.1, 7.2 ]
# platform: [ apollolake, broadwell, broadwellnk, bromolow, denverton, epyc7002, geminilake, purley, r1000, v1000 ]
# exclude:
#   - version: 7.1
#     platform: broadwell
# include:
#   - version: "7.2"
#     platform: "broadwell"

name: Build iptables

on:  
  release:
    types: [published]

  workflow_dispatch:
    inputs:
      version:
        description: 'format %y.%-m.$i or auto'
        required: false
        type: string

jobs:
  build:
    strategy:
      matrix:
        include:
          - version: 6.2 
            platform: apollolake
          - version: 6.2 
            platform: braswell
          - version: 6.2 
            platform: broadwell
          - version: 6.2 
            platform: broadwellnk
          - version: 6.2 
            platform: bromolow
          - version: 6.2 
            platform: denverton
          # checkout 6.2.4
          - version: 6.2 
            platform: geminilake
          # checkout 6.2.4
          - version: 6.2 
            platform: purley
          # checkout 6.2.4
          - version: 6.2 
            platform: v1000 
          # checkout 6.2.4
          - version: 6.2
            platform: rtd1296

          - version: 7.1 
            platform: apollolake
          - version: 7.1
            platform: braswell
          - version: 7.1
            platform: broadwell
          - version: 7.1 
            platform: broadwellnk
          - version: 7.1 
            platform: bromolow
          - version: 7.1
            platform: denverton
          #- version: 7.1
          #  platform: epyc7002
          - version: 7.1 
            platform: geminilake
          - version: 7.1 
            platform: purley
          - version: 7.1
            platform: r1000
          - version: 7.1
            platform: v1000
          - version: 7.1
            platform: rtd1296
          #- version: 7.1 
          #  platform: rtd1619b

          - version: 7.2 
            platform: apollolake
          - version: 7.2
            platform: braswell
          - version: 7.2
            platform: broadwell
          - version: 7.2 
            platform: broadwellnk
          #- version: 7.2 
          #  platform: bromolow
          - version: 7.2
            platform: denverton
          - version: 7.2
            platform: epyc7002
          - version: 7.2 
            platform: geminilake
          - version: 7.2 
            platform: purley
          - version: 7.2
            platform: r1000
          - version: 7.2
            platform: v1000
          - version: 7.2
            platform: rtd1296
          - version: 7.2 
            platform: rtd1619b

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai" 
          
      # - name: Cache EnvDeploy
      #   id: cache-env
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-env
      #   with:
      #     path: |
      #       ${{ github.workspace }}/pkgscripts-ng
      #       ${{ github.workspace }}/build_env
      #     key: ds.${{ matrix.platform }}-${{ matrix.version }}
          
      - name: Get EnvDeploy
        # if: ${{ steps.cache-env.outputs.cache-hit != 'true' }}
        run: |
          ROOT_PATH=${{ github.workspace }}

          git clone https://github.com/SynologyOpenSource/pkgscripts-ng.git ${ROOT_PATH}/pkgscripts-ng
          cd ${ROOT_PATH}/pkgscripts-ng
          # if version == 6.2, checkout 6.2.4
          git checkout DSM${{ matrix.version }}`[ "${{ matrix.version }}" = "6.2" ] && echo ".4"`
          sudo ./EnvDeploy -v ${{ matrix.version }}`[ "${{ matrix.version }}" = "6.2" ] && echo ".4"` -l  # Get Available platforms
          sudo ./EnvDeploy -q -v ${{ matrix.version }} -p ${{ matrix.platform }}

          #ENV
          mkdir -p ${ROOT_PATH}/source

          ENV_PATH=${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}
          sudo cp -al ${ROOT_PATH}/pkgscripts-ng ${ENV_PATH}/

          sudo chroot ${ENV_PATH} << "EOF"
          cd pkgscripts

          version=${{ matrix.version }}; [ ${version:0:1} -gt 6 ] && sed -i 's/print(" ".join(kernels))/pass #&/' ProjectDepends.py
          sed -i '/PLATFORM_FAMILY/a\\techo "PRODUCT=$PRODUCT" >> $file\n\techo "KSRC=$KERNEL_SEARCH_PATH" >> $file\n\techo "LINUX_SRC=$KERNEL_SEARCH_PATH" >> $file' include/build
          ./SynoBuild -c -p ${{ matrix.platform }}

          while read line; do if [ ${line:0:1} != "#" ]; then export ${line%%=*}="${line#*=}"; fi; done < /env${BUILD_ARCH}.mak
          if [ -f "${KSRC}/Makefile" ]; then
            # gcc issue "unrecognized command-line option '--param=allow-store-data-races=0'".
            [ "${{ matrix.version }}" == "7.2" ] && sed -i 's/--param=allow-store-data-races=0/--allow-store-data-races/g' ${KSRC}/Makefile

            VERSION=`cat ${KSRC}/Makefile | grep ^VERSION | awk -F' ' '{print $3}'`
            PATCHLEVEL=`cat ${KSRC}/Makefile | grep ^PATCHLEVEL | awk -F' ' '{print $3}'`
            SUBLEVEL=`cat ${KSRC}/Makefile | grep ^SUBLEVEL | awk -F' ' '{print $3}'`
            [ -f "/env32.mak" ] && echo "KVER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> /env32.mak
            [ -f "/env64.mak" ] && echo "KVER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> /env64.mak
            CCVER=`$CC --version | head -n 1 | awk -F' ' '{print $3}'`
            [ -f "/env32.mak" ] && echo "CCVER=${CCVER}" >> /env32.mak
            [ -f "/env64.mak" ] && echo "CCVER=${CCVER}" >> /env64.mak
          fi
          EOF
          
          [ -f ${ENV_PATH}/env64.mak ] && ENV_FILE=${ENV_PATH}/env64.mak || ([ -f ${ENV_PATH}/env32.mak ] && ENV_FILE=${ENV_PATH}/env32.mak)
          if [ -n "${ENV_FILE}" ]; then
            KVER=`grep 'KVER=' ${ENV_FILE} | awk -F'=' '{print $2}'`
            CCVER=`grep 'CCVER=' ${ENV_FILE} | awk -F'=' '{print $2}'`
            [ -n "${KVER}" ] && echo "KVER=${KVER}" >> $GITHUB_ENV
            [ -n "${CCVER}" ] && echo "CCVER=${CCVER}" >> $GITHUB_ENV
          fi

      - name: Get Src
        run: |
          ROOT_PATH=${{ github.workspace }}

          mkdir -p ${ROOT_PATH}/source/output
          repo=${{ env.repo }}
          KVER=${{ env.KVER }}

          sudo cp -a ${ROOT_PATH}/src/${KVER:0:1}.x ${ROOT_PATH}/source/input

          sudo cp -a ${ROOT_PATH}/source ${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/

      - name: Make
        run: |
          ROOT_PATH=${{ github.workspace }}

          sudo chroot build_env/ds.${{ matrix.platform }}-${{ matrix.version }} << "EOF"
          sed -i 's/^CFLAGS=/#CFLAGS=/g; s/^CXXFLAGS=/#CXXFLAGS=/g' /env${BUILD_ARCH}.mak
          while read line; do if [ ${line:0:1} != "#" ]; then export ${line%%=*}="${line#*=}"; fi; done < /env${BUILD_ARCH}.mak

          cd /source/input
          [ -z "`grep 'env.mak' Makefile`" ] && sed -i '1 i include /env.mak' Makefile
          PARMS=" `cat "defines" | xargs`"
          make -j`nproc` -C "${KSRC}" M="${PWD}" ${PARMS} modules
          mkdir -p /source/output/modules
          while read F; do
            strip -g "${F}"
            echo "Copying `basename ${F}`"
            cp "${F}" "/source/output/modules"
          done < <(find ${PWD} -name \*.ko)
          
          mkdir -p /source/output/iptables
          git clone -c http.sslVerify=false git://git.netfilter.org/iptables iptables
          cd iptables
          git checkout $(git describe --abbrev=0)
          . ./autogen.sh
          ./configure CC=${CC} --host=${HOST} --prefix="/source/output/iptables" --disable-nftables
          [ -z "`grep 'env.mak' Makefile`" ] && sed -i '1 i include /env.mak' Makefile
          make -j`nproc`
          make -j`nproc` install

          chown 1000.1000 -R /source/output
          EOF

          sudo cp -a ${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/source/output ${ROOT_PATH}/source/

    
      # - name: GCC 12
      #   if: startsWith(env.CCVER, '12') && startsWith(env.KVER, '4')
      #   shell: python
      #   run: |
      #     # -*- coding: utf-8 -*-
      # 
      #     import sys, os, re
      # 
      #     # R_X86_64_PC32  = 2
      #     # R_X86_64_PLT32 = 4
      # 
      #     def PLT322PC32(infile, outfile):
      #         readelfLines = []
      #         with os.popen('readelf -r "{}"'.format(infile)) as f:
      #             readelfLines = f.readlines()
      # 
      #         offsetList = []
      #         start = 0
      #         for idx, line in enumerate(readelfLines):
      #             if line.startswith('Relocation section'):
      #                 arr = re.findall(r'0x[0-9a-f]*', line)
      #                 offat = int(arr[0], base=16)
      #                 start = idx + 1
      #                 continue
      #             if "R_X86_64_PLT32" in line:
      #                 offsetList.append(offat + (idx - start - 1) * 24 + 8)
      # 
      #         if len(offsetList) > 0:
      #             obj = []
      #             with open(infile, 'rb') as f:
      #                 obj = list(f.read())
      # 
      #             if len(obj) > 0:
      #                 for offset in offsetList:
      #                     assert obj[offset] == (4 if sys.version_info.major >= 3 else 'x04')
      #                     obj[offset] = 2 if sys.version_info.major >= 3 else 'x02'
      #         
      #             with open(outfile, 'wb') as f:
      #                 f.write(bytes(obj) if sys.version_info.major >= 3 else ''.join(obj))
      #             return True
      #         return False
      # 
      #     if __name__ == '__main__':
      #         ROOT_PATH = '${{ github.workspace }}'
      #         modules = os.listdir(os.path.join(ROOT_PATH, 'source/output'))
      #         for module in modules:
      #             module_path = os.path.join(ROOT_PATH, 'source/output', module)
      #             ret = PLT322PC32(module_path, module_path)
      #             if ret == False:
      #                 print('{} no has.'.format(module_path))

      - name: Tar to Artifacts
        run: |
          tar caf ${{ github.workspace }}/source/${{ matrix.platform }}-${{ env.KVER }}.tgz -C ${{ github.workspace }}/source/output .

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: iptables
          path: |
            ${{ github.workspace }}/source/*.tgz
            
      - name: clean
        run: |
          sudo rm -rf ${{ github.workspace }}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/source/*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Calculate version
        run: |
          # Calculate version
          VERSION=""
          if [ ${{ github.event_name }} == 'release' -a ${{ github.ref_type }} == 'tag' ]; then
            VERSION="${{ github.ref_name }}"
          elif [ -n "${{ inputs.version }}" ]; then
            if [ "`echo ${{ inputs.version }} | cut -d '.' -f 1,2`" = "`date +'%y.%-m'`" ]; then
              VERSION="${{ inputs.version }}"
            else
              LATEST_TAG="`curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null`"
              if [ -n "${LATEST_TAG}" -a "`echo ${LATEST_TAG} | cut -d '.' -f 1,2`" = "`date +'%y.%-m'`" ]; then  # format %y.%-m.$i
                VERSION="`echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.'`"
              else
                VERSION="`date +'%y.%-m'`.0"
              fi
            fi
          else
            VERSION=""
          fi

          echo "VERSION: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: download to artifacts
        if: env.VERSION != ''
        uses: actions/download-artifact@v3
        with:
          name: iptables
          path: ./iptables

      # - name: Zip iptables
      #   if: env.VERSION != ''
      #   run: |
      #     echo "${{ env.VERSION }}" > "modules/VERSION"
      #     zip -9 iptables.zip -j iptables/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: env.VERSION != ''
        with:
          tag_name: ${{ env.VERSION }}
          files: ./iptables/*
